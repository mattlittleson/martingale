{"version":3,"sources":["game.ts","Graph.tsx","App.tsx","index.tsx"],"names":["runGame","gambler","game","id","initialBet","initialWallet","currentBet","currentWallet","lossCount","walletWithoutBet","random","gambleType","Graph","props","formatted","data","map","name","ResponsiveContainer","width","height","minWidth","minHeight","LineChart","XAxis","dataKey","Tooltip","Line","type","stroke","strokeWidth","initialState","history","reducer","state","action","wallet","bet","Error","App","useState","currentIndex","setCurrentIndex","useReducer","dispatch","spacing","style","marginTop","fontSize","boxSize","objectFit","src","alt","direction","pointerEvents","children","disabled","length","placeholder","value","addCommas","onChange","e","parseInt","removeCommas","target","paddingTop","isFullWidth","colorScheme","variant","onClick","justifyContent","textAlign","undefined","slice","aria-label","min","max","Math","step","val","i","n","split","join","s","replace","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55e067a2.chunk.js","sourcesContent":["import { random } from 'lodash'\n\ntype GameType = 'coin' | 'roulette'\n\nexport const runGame = (gambler: Gambler, game: GameType): Gambler => {\n  const {\n    id,\n    initialBet,\n    initialWallet,\n    currentBet,\n    currentWallet,\n    lossCount,\n  } = gambler\n\n  // run gambler\n  const walletWithoutBet = currentWallet - currentBet\n  const gamblerBet = random(0, 100)\n\n  // run game\n  const odds = 2\n  // const randomNumber = random(0, 100)\n\n  // if win\n  const win = gamblerBet <= 48\n  // if (gamblerBet === randomNumber) {\n  if (win) {\n    return {\n      id: id + 1,\n      initialBet,\n      currentBet: initialBet,\n      initialWallet,\n      // return the money and more\n      currentWallet: walletWithoutBet + odds * currentBet,\n      lossCount,\n      gambleType: 'Win',\n    }\n  }\n  // if lose\n  else {\n    return {\n      id: id + 1,\n      initialBet,\n      // double their next bet\n      currentBet: currentBet * 2,\n      initialWallet,\n      currentWallet: walletWithoutBet,\n      lossCount: lossCount + 1,\n      gambleType: 'Loss',\n    }\n  }\n}\n\nexport interface Gambler {\n  id: number\n  initialBet: number\n  currentBet: number\n  initialWallet: number\n  currentWallet: number\n  lossCount: number\n  gambleType: 'Win' | 'Loss' | string\n}\n\nexport interface GameState {\n  gambler: Gambler\n  history: Gambler[]\n}\n","import React from 'react'\nimport { LineChart, Line, ResponsiveContainer, Tooltip, XAxis } from 'recharts'\nimport { Gambler } from './game'\n\n// const data = [\n//   {\n//     name: 'Page A',\n//     uv: 4000,\n//     pv: 2400,\n//     amt: 2400,\n//   },\n// ]\n\nexport default function Graph(props: { data: Gambler[] }) {\n  const { data } = props\n  const formatted = data.map((data) => ({\n    ...data,\n    name: `${data.id}`,\n  }))\n  return (\n    <ResponsiveContainer\n      width='100%'\n      height='100%'\n      minWidth={300}\n      minHeight={200}\n    >\n      <LineChart width={300} height={300} data={formatted}>\n        <XAxis dataKey='name' />\n\n        <Tooltip />\n\n        <Line\n          type='monotone'\n          dataKey='currentBet'\n          stroke='#6200ff'\n          strokeWidth={2}\n        />\n        <Line\n          type='monotone'\n          dataKey='currentWallet'\n          stroke='#00ff2a'\n          strokeWidth={2}\n        />\n        <Line\n          type='monotone'\n          dataKey='lossCount'\n          stroke='#ff0000'\n          strokeWidth={2}\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  )\n}\n","import { useReducer, useState } from 'react'\nimport {\n  Container,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Stack,\n  Image,\n  Button,\n  Text,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n} from '@chakra-ui/react'\nimport { Gambler, GameState, runGame } from './game'\nimport Graph from './Graph'\n\nconst initialGambler: Gambler = {\n  id: 0,\n  initialBet: 0,\n  currentBet: 0,\n  initialWallet: 0,\n  currentWallet: 0,\n  lossCount: 0,\n  gambleType: '_',\n}\n\nconst initialState: GameState = {\n  history: [],\n  gambler: initialGambler,\n}\n\ninterface SetWallet {\n  type: 'setWallet'\n  wallet: number\n}\n\ninterface SetBet {\n  type: 'setBet'\n  bet: number\n}\n\ninterface LockIn {\n  type: 'lockIn'\n}\n\ninterface Run {\n  type: 'run'\n}\n\ninterface Reset {\n  type: 'reset'\n}\n\ntype Actions = SetBet | SetWallet | LockIn | Run | Reset\n\nfunction reducer(state: GameState, action: Actions) {\n  const { gambler, history } = state\n\n  switch (action.type) {\n    case 'setWallet':\n      return {\n        history,\n        gambler: {\n          ...gambler,\n          initialWallet: action.wallet,\n        },\n      }\n    case 'setBet':\n      return {\n        history,\n        gambler: {\n          ...gambler,\n          initialBet: action.bet,\n        },\n      }\n    case 'lockIn':\n      return {\n        history,\n        gambler: {\n          ...gambler,\n          currentBet: gambler.initialBet,\n          currentWallet: gambler.initialWallet,\n        },\n      }\n    case 'run':\n      return {\n        history: [...history, gambler],\n        gambler: runGame(gambler, 'coin'),\n      }\n    case 'reset':\n      return initialState\n    default:\n      throw new Error()\n  }\n}\n\nexport default function App() {\n  const [currentIndex, setCurrentIndex] = useState(0)\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { gambler, history } = state\n  const { initialWallet, currentWallet, initialBet, currentBet, lossCount } =\n    gambler\n\n  return (\n    <Container>\n      <Stack spacing={4} style={{ marginTop: 16 }}>\n        <Text fontSize='2xl'>Martingale betting system</Text>\n        <Image\n          boxSize='150px'\n          objectFit='contain'\n          src='/monki.png'\n          alt='monki'\n        />\n        <Stack spacing={4} direction='row'>\n          <div>\n            <Text fontSize='2xl'>Bet</Text>\n            <InputGroup>\n              <InputLeftElement pointerEvents='none' children='$' />\n              <Input\n                disabled={history.length > 0}\n                placeholder='initial bet'\n                value={addCommas(initialBet)}\n                onChange={(e) =>\n                  dispatch({\n                    type: 'setBet',\n                    bet: parseInt(removeCommas(e.target.value)) || 0,\n                  })\n                }\n              />\n            </InputGroup>\n          </div>\n          <div>\n            <Text fontSize='2xl'>Wallet</Text>\n            <InputGroup>\n              <InputLeftElement pointerEvents='none' children='$' />\n              <Input\n                disabled={history.length > 0}\n                placeholder='wallet'\n                value={addCommas(initialWallet)}\n                onChange={(e) =>\n                  dispatch({\n                    type: 'setWallet',\n                    wallet: parseInt(removeCommas(e.target.value)) || 0,\n                  })\n                }\n              />\n            </InputGroup>\n          </div>\n        </Stack>\n        <Stack spacing={4} direction='row' style={{ paddingTop: 32 }}>\n          <Button\n            isFullWidth\n            disabled={history.length > 0}\n            colorScheme='teal'\n            variant='solid'\n            onClick={() => {\n              dispatch({\n                type: 'lockIn',\n              })\n            }}\n          >\n            Lock In\n          </Button>\n          <Button\n            colorScheme='teal'\n            variant='outline'\n            onClick={() => {\n              dispatch({\n                type: 'reset',\n              })\n            }}\n          >\n            Reset\n          </Button>\n        </Stack>\n        <Stack direction='row' spacing={4} justifyContent='space-between'>\n          <Text fontSize='1xl' textAlign='center'>\n            Current Bet\n            <br />\n            {addCommas(currentBet)}\n          </Text>\n          <Text fontSize='1xl' textAlign='center'>\n            Current Wallet\n            <br />\n            {addCommas(currentWallet)}\n          </Text>\n\n          <Text fontSize='1xl' textAlign='center'>\n            Loss Count\n            <br />\n            {addCommas(lossCount)}\n          </Text>\n          <Text fontSize='2xl' textAlign='center'>\n            {history.length > 0\n              ? history[history.length - 1].gambleType\n              : undefined}\n          </Text>\n        </Stack>\n        <Graph data={history.slice(currentIndex, history.length - 1)} />\n        <Slider\n          aria-label='slider-ex-1'\n          value={currentIndex}\n          min={0}\n          max={Math.max(0, history.length - 2)}\n          step={1}\n          onChange={(val) => setCurrentIndex(val)}\n        >\n          <SliderTrack>\n            <SliderFilledTrack />\n          </SliderTrack>\n          <SliderThumb />\n        </Slider>\n        <Stack direction='row' spacing={4}>\n          <Button\n            isFullWidth\n            colorScheme='teal'\n            variant='solid'\n            onClick={() => {\n              dispatch({\n                type: 'run',\n              })\n            }}\n          >\n            Bet\n          </Button>\n          <Button\n            colorScheme='orange'\n            variant='solid'\n            onClick={() => {\n              for (let i = 0; i < 100; i++) {\n                dispatch({\n                  type: 'run',\n                })\n              }\n            }}\n          >\n            x100\n          </Button>\n        </Stack>\n      </Stack>\n    </Container>\n  )\n}\n\nfunction addCommas(n: number) {\n  return `${n}`.split(/(?=(?:\\d{3})+$)/).join(',')\n}\n\nfunction removeCommas(s: string) {\n  return `${s}`.replace(/,/gi, '')\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ChakraProvider } from '@chakra-ui/react'\nimport { extendTheme, ThemeConfig } from '@chakra-ui/react'\nimport App from './App'\n\n// 2. Add your color mode config\nconst config: ThemeConfig = {\n  initialColorMode: 'dark',\n  useSystemColorMode: false,\n}\n\n// 3. extend the theme\nconst theme = extendTheme({ config })\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}